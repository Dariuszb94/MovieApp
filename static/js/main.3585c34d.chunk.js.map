{"version":3,"sources":["components/Search.js","components/Result.js","components/Results.js","components/Stars.js","components/Popup.js","components/Const.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","openPopup","onClick","imdbID","src","Poster","alt","Title","Results","results","map","key","Stars","selected","total","rating","imdbRating","interactive","Popup","closePopup","console","log","Year","Genre","Plot","apiurl","App","useState","urlEnd","state","setState","handleErrors","error","response","alert","data","status","headers","request","message","config","e","target","value","prevState","axios","get","params","_limit","then","catch","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3585c34d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Search ({handleInput, search}){ //16:41\r\n    return (\r\n   <section className=\"searchbox-wrap\">\r\n       <input type=\"text\" \r\n       placeholder=\"Search for a movie...\" \r\n       className=\"searchbox\" \r\n       onChange={handleInput}\r\n       onKeyPress={search}\r\n       />\r\n       </section>\r\n \r\n    )\r\n}\r\nexport default Search","\nimport React from 'react'\n\nfunction Result ({result, openPopup}){\n  \n    return(\n <div className=\"result\" onClick={()=>openPopup(result.imdbID)}>\n     <img src={result.Poster} alt={result.Title}/>\n     <h3>{result.Title}</h3>\n     \n     \n </div>\n    )\n}\n\nexport default Result","\nimport React from 'react';\nimport Result from './Result';\n\nfunction Results ({results, openPopup}){\n    return(\n     <section className=\"results\">\n         {results.map(result => (\n             <Result key={result.imdbID} result={result} openPopup={openPopup}/>\n         ))}\n     </section>\n    )\n}\n\nexport default Results","import React from 'react';\r\nimport Rater from 'react-rater';\r\nimport 'react-rater/lib/react-rater.css';\r\n\r\n\r\nfunction Stars ({selected}){\r\n \r\n\r\n  return (<Rater total={10}  rating={selected.imdbRating} interactive={false} />)\r\n}\r\n\r\nexport default Stars","\nimport React from 'react';\nimport Stars from './Stars';\n\n\n\n\nfunction Popup({selected, closePopup}){\n  console.log(selected);\n    return (\n   <section className=\"popup\">\n   <div className=\"content\">\n   <h2>{selected.Title}<span>({selected.Year})</span></h2>\n   <p className=\"rating\">Rating: {selected.imdbRating}</p>\n<p>Genre: {selected.Genre}</p>\n<Stars selected={selected}/>\n\n <div className=\"plot\">\n <img src={selected.Poster} alt ={selected.Title}/>\n <p>{selected.Plot}</p>\n </div>\n <button className=\"close\" onClick={closePopup}>Close</button>\n   </div>\n   </section>\n    )\n}\n\nexport default Popup","\r\nexport const apiurl = \"https://www.omdbapi.com/?apikey=885b8a6d\";\r\n","import React, {useState} from 'react';\r\nimport Search from './components/Search';\r\nimport axios from 'axios'\r\nimport Results from './components/Results';\r\nimport Popup from './components/Popup';\r\nimport {apiurl} from './components/Const';\r\n\r\nfunction App() {\r\n  const [state, setState]=useState({\r\nurlEnd:\"\",\r\nresults:[],\r\nselected:{}\r\n  });\r\n  const search=(e)=>{\r\n    if (e.key===\"Enter\"){\r\naxios.get(apiurl+\"&s=\"+state.urlEnd, {params:{_limit:5}})\r\n.then(({data})=>{\r\n  let results=data.Search;\r\n  if (results){\r\n  setState(prevState => {\r\n    return {...prevState, results:results}\r\n  })\r\n}\r\n  else{\r\n    alert(\"There are no movies for your search\");\r\n  }\r\n})\r\n.catch(handleErrors)\r\n    }\r\n  }\r\n\r\n  function handleErrors(error) {\r\n    if (error.response) {\r\n      // The request was made and the server responded with a status code\r\n      // that falls out of the range of 2xx\r\n      alert(error.response.data);\r\n      alert(error.response.status);\r\n      alert(error.response.headers);\r\n    } else if (error.request) {\r\n      // The request was made but no response was received\r\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n      // http.ClientRequest in node.js\r\n      alert(error.request);\r\n    } else {\r\n      // Something happened in setting up the request that triggered an Error\r\n      alert('Error', error.message);\r\n    }\r\n    alert(error.config);\r\n  }\r\n\r\n  const handleInput=(e) => {\r\n    \r\n    let urlEnd=e.target.value;\r\nsetState(prevState =>{\r\n  return {...prevState,urlEnd:urlEnd}\r\n});\r\n\r\n  }\r\n  const openPopup=id =>{\r\n    axios.get(apiurl+\"&i=\"+id)\r\n    .then(({data})=>{\r\n      let result=data;\r\n\r\n      setState(prevState=>{\r\nreturn {...prevState,selected:result}\r\n      });\r\n    })\r\n    .catch(handleErrors)\r\n  }\r\n  const closePopup = () => {\r\n  setState(prevState=>{\r\n    return{...prevState, selected:{}}\r\n  });\r\n}\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"Header\">\r\n<h1>Movie Database</h1>\r\n      </header>\r\n      <main>\r\n       <Search handleInput={handleInput} search={search}/>\r\n     <Results results={state.results} openPopup={openPopup}/>\r\n     {(typeof state.selected.Title != \"undefined\") ? <Popup selected={state.selected} closePopup={closePopup} /> :false}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}