{"version":3,"sources":["components/Search.js","components/Result.js","components/Results.js","components/Stars.js","components/Popup.js","components/Const.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","getMovies","type","placeholder","className","onChange","onKeyPress","Result","result","selectedMovie","onClick","imdbID","src","Poster","alt","Title","Results","results","map","key","Stars","selected","rating","parseInt","imdbRating","total","interactive","Popup","closePopup","Year","Plot","Genre","apiurl","App","useState","urlEnd","state","setState","handleErrors","error","response","alert","data","status","headers","request","message","config","e","target","value","prevState","axios","get","params","_limit","then","catch","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67ddb0e3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Search ({handleInput, getMovies}){ //from App.js\r\n    return (\r\n  \r\n       <input type=\"text\" \r\n       placeholder=\"Type a movie title here\" \r\n       className=\"searchbox\" \r\n       onChange={handleInput}  \r\n       onKeyPress={getMovies}\r\n       />\r\n     \r\n    )\r\n}\r\nexport default Search","\nimport React from 'react'\n\nfunction Result ({result, selectedMovie}){ //from App.js\n  \n    return(\n <div className=\"result\" onClick={()=>selectedMovie(result.imdbID)} > \n     <img src={result.Poster} alt={result.Title}/>  \n     <h3>{result.Title}</h3>\n </div>\n    )\n}\n\nexport default Result","\nimport React from 'react';\nimport Result from './Result';\n\nfunction Results ({results, selectedMovie}){\n    return(\n     <section className=\"results\">\n         {results.map(result => (\n             <Result key={result.imdbID} result={result} selectedMovie={selectedMovie} />\n         ))}\n     </section>\n    )\n}\n\nexport default Results","import React from 'react';\r\nimport Rater from 'react-rater';\r\nimport 'react-rater/lib/react-rater.css';\r\n\r\n\r\nfunction Stars ({selected}){ //from Popup.js\r\n let  rating=parseInt(selected.imdbRating); //change rating from string to number\r\n  return (<Rater total={10}  rating={rating} interactive={false} />)  //total= total number of stars, rating=number of stars active, interactive=readonly\r\n}\r\n\r\nexport default Stars","\nimport React from 'react';\nimport Stars from './Stars';\n\nfunction Popup({selected, closePopup}){ //from App.js\n\n    return (\n   <section className=\"popup\">\n   <div className=\"content\">\n   <h2>{selected.Title}&nbsp;({selected.Year})</h2>\n <div className=\"summary\">\n <img src={selected.Poster} alt ={selected.Title} className=\"posterImg\"/>\n <p className=\"plot\">{selected.Plot}</p>\n </div>\n <div className=\"rating\">Rating: <Stars selected={selected}/> </div> \n<p>Genre: {selected.Genre}</p>\n <button className=\"close\" onClick={closePopup}>Back to search</button>\n   </div>\n   </section>\n    )\n}\n\nexport default Popup","\r\nexport const apiurl = \"https://www.omdbapi.com/?apikey=885b8a6d\";\r\n","import React, {useState} from 'react';\r\nimport Search from './components/Search';\r\nimport axios from 'axios'\r\nimport Results from './components/Results';\r\nimport Popup from './components/Popup';\r\nimport {apiurl} from './components/Const';\r\n\r\nfunction App() { //define states \r\n  const [state, setState]=useState({\r\nurlEnd:\"\", //unique url for movie\r\nresults:[],  //listed movie after search\r\nselected:{} //popup movie\r\n  });\r\n\r\n  const getMovies=(e)=>{  \r\naxios.get(apiurl+\"&s=\"+state.urlEnd, {params:{_limit:5}}) //get movies from db\r\n.then(({data})=>{ \r\n  let results=data.Search;\r\n  if (results){\r\n  setState(prevState => {\r\n    return {...prevState, results:results}\r\n  })\r\n}\r\n  else{\r\n    alert(\"There are no movies for your search\");\r\n  }\r\n})\r\n.catch(handleErrors) //error handling\r\n  }\r\n\r\n  function handleErrors(error) {\r\n    if (error.response) {\r\n      alert(error.response.data);\r\n      alert(error.response.status);\r\n      alert(error.response.headers);\r\n    } else if (error.request) {\r\n      alert(error.request);\r\n    } else {\r\n      alert('Error', error.message);\r\n    }\r\n    alert(error.config);\r\n  }\r\n\r\n  const handleInput=(e) => {  //add text from text input to url\r\n    let urlEnd=e.target.value;\r\nsetState(prevState =>{\r\n  return {...prevState,urlEnd:urlEnd}\r\n});\r\n  }\r\n\r\n  const selectedMovie=id =>{ //popup movie\r\n    axios.get(apiurl+\"&i=\"+id)\r\n    .then(({data})=>{\r\n      let result=data;\r\n      setState(prevState=>{\r\nreturn {...prevState,selected:result}\r\n      });\r\n    })\r\n    .catch(handleErrors)\r\n  }\r\n\r\n  const closePopup = () => {  //back to the movie list\r\n  setState(prevState=>{\r\n    return{...prevState, selected:{}}\r\n  });\r\n}\r\n\r\n  return (\r\n    <div className=\"App\">\r\n       <main>\r\n      <div className=\"container\">\r\n      <header className=\"header\">\r\n<h1>The Movie Database</h1>\r\n      </header>\r\n         <div className=\"searchbar\">\r\n       <Search handleInput={handleInput} /><button onClick={getMovies} className=\"searchBtn\">Search</button> \r\n       </div>\r\n     <Results results={state.results} selectedMovie={selectedMovie}/> \r\n     {(typeof state.selected.Title != \"undefined\") ? <Popup selected={state.selected} closePopup={closePopup} /> :false}\r\n     </div> \r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}