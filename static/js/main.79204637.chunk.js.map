{"version":3,"sources":["components/Search.js","components/Result.js","components/Results.js","components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","openPopup","onClick","imdbID","src","Poster","alt","Title","Results","results","map","key","Popup","selected","closePopup","Year","imdbRating","Plot","App","useState","s","state","setState","apiurl","handleErrors","error","response","alert","data","status","headers","request","message","config","e","target","value","prevState","axios","get","params","_limit","then","catch","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2NAeeA,MAbf,YAAwC,IAAtBC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,OAC3B,OACD,6BAASC,UAAU,kBACf,2BAAOC,KAAK,OACZC,YAAY,wBACZF,UAAU,YACVG,SAAUL,EACVM,WAAYL,M,gBCEJM,MATf,YAAsC,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,UACtB,OACH,yBAAKP,UAAU,SAASQ,QAAS,kBAAID,EAAUD,EAAOG,UAClD,yBAAKC,IAAKJ,EAAOK,OAAQC,KAAG,IAC5B,4BAAKN,EAAOO,SCMFC,MATf,YAAwC,IAArBC,EAAoB,EAApBA,QAASR,EAAW,EAAXA,UACxB,OACC,6BAASP,UAAU,WACde,EAAQC,KAAI,SAAAV,GAAM,OACf,kBAAC,EAAD,CAAQW,IAAKX,EAAOG,OAAQH,OAAQA,EAAQC,UAAWA,SCUrDW,MAff,YAAuC,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,WACtB,OACD,6BAASpB,UAAU,SACnB,yBAAKA,UAAU,WACf,4BAAKmB,EAASN,MAAM,kCAAQM,EAASE,KAAjB,MACpB,uBAAGrB,UAAU,UAAb,WAA+BmB,EAASG,YAC1C,yBAAKtB,UAAU,QACf,yBAAKU,IAAKS,EAASR,SACnB,2BAAIQ,EAASI,OAEb,4BAAQvB,UAAU,QAAQQ,QAASY,GAAnC,YC8EcI,MAnFf,WAAgB,IAAD,EACWC,mBAAS,CACnCC,EAAE,GACFX,QAAQ,GACRI,SAAS,KAJM,mBACNQ,EADM,KACCC,EADD,KAMPC,EAAS,0CA6CjB,SAASC,EAAaC,GAChBA,EAAMC,UAGRC,MAAMF,EAAMC,SAASE,MACrBD,MAAMF,EAAMC,SAASG,QACrBF,MAAMF,EAAMC,SAASI,UACZL,EAAMM,QAIfJ,MAAMF,EAAMM,SAGZJ,MAAM,QAASF,EAAMO,SAEvBL,MAAMF,EAAMQ,QAEZ,OACE,yBAAKvC,UAAU,OACb,4BAAQA,UAAU,cACxB,+CAEM,8BACC,kBAAC,EAAD,CAAQF,YA/CK,SAAC0C,GAEjB,IAAId,EAAEc,EAAEC,OAAOC,MACnBd,GAAS,SAAAe,GACP,OAAO,eAAIA,EAAX,CAAqBjB,EAAEA,QA2CgB3B,OAnE1B,SAACyC,GACA,UAARA,EAAEvB,KACV2B,IAAMC,IAAIhB,EAAO,MAAMF,EAAMD,EAAG,CAACoB,OAAO,CAACC,OAAO,KAC/CC,MAAK,YAAW,IACXjC,EADU,EAARmB,KACWrC,OACbkB,EACJa,GAAS,SAAAe,GACP,OAAO,eAAIA,EAAX,CAAsB5B,QAAQA,OAG9BkB,MAAM,0CAGTgB,MAAMnB,MAuDF,kBAAC,EAAD,CAASf,QAASY,EAAMZ,QAASR,UAxCpB,SAAA2C,GACdN,IAAMf,EAAO,MAAMqB,GAAIF,MAAK,YAAW,IACjC1C,EADgC,EAAR4B,KAG5BN,GAAS,SAAAe,GACf,OAAO,eAAIA,EAAX,CAAqBxB,SAASb,UAGzB2C,MAAMnB,MAiC2B,oBAAxBH,EAAMR,SAASN,OAAwB,kBAAC,EAAD,CAAOM,SAAUQ,EAAMR,SAAUC,WA/BjE,WACnBQ,GAAS,SAAAe,GACP,sBAAUA,EAAV,CAAqBxB,SAAS,cC3CdgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,kB","file":"static/js/main.79204637.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Search ({handleInput, search}){ //16:41\r\n    return (\r\n   <section className=\"searchbox-wrap\">\r\n       <input type=\"text\" \r\n       placeholder=\"Search for a movie...\" \r\n       className=\"searchbox\" \r\n       onChange={handleInput}\r\n       onKeyPress={search}\r\n       />\r\n       </section>\r\n \r\n    )\r\n}\r\nexport default Search","import React from 'react'\r\n\r\nfunction Result ({result, openPopup}){\r\n    return(\r\n <div className=\"result\" onClick={()=>openPopup(result.imdbID)}>\r\n     <img src={result.Poster} alt/>\r\n     <h3>{result.Title}</h3>\r\n     \r\n </div>\r\n    )\r\n}\r\nexport default Result","import React from 'react'\r\nimport Result from './Result'\r\n\r\nfunction Results ({results, openPopup}){\r\n    return(\r\n     <section className=\"results\">\r\n         {results.map(result => (\r\n             <Result key={result.imdbID} result={result} openPopup={openPopup}/>\r\n         ))}\r\n     </section>\r\n    )\r\n}\r\nexport default Results","import React from 'react'\r\n\r\nfunction Popup({selected, closePopup}){\r\n    return (\r\n   <section className=\"popup\">\r\n   <div className=\"content\">\r\n   <h2>{selected.Title}<span>({selected.Year})</span></h2>\r\n   <p className=\"rating\">Rating: {selected.imdbRating}</p>\r\n <div className=\"plot\">\r\n <img src={selected.Poster}/>\r\n <p>{selected.Plot}</p>\r\n </div>\r\n <button className=\"close\" onClick={closePopup}>Close</button>\r\n   </div>\r\n   </section>\r\n    )\r\n}\r\nexport default Popup","import React, {useState} from 'react';\nimport Search from './components/Search';\nimport axios from 'axios'\nimport Results from './components/Results';\nimport Popup from './components/Popup';\n\n\nfunction App() {\n  const [state, setState]=useState({\ns:\"\",\nresults:[],\nselected:{}\n  });\n  const apiurl = \"http://www.omdbapi.com/?apikey=885b8a6d\";\n\n  const search=(e)=>{\n    if (e.key===\"Enter\"){\naxios.get(apiurl+\"&s=\"+state.s, {params:{_limit:5}})\n.then(({data})=>{\n  let results=data.Search;\n  if (results){\n  setState(prevState => {\n    return {...prevState, results:results}\n  })}\n  else{\n    alert(\"There are no movies for your search\");\n  }\n})\n.catch(handleErrors)\n    }\n  }\n \n\n\n\n  const handleInput=(e) => {\n    \n    let s=e.target.value;\nsetState(prevState =>{\n  return {...prevState,s:s}\n});\n\n  }\n  const openPopup=id =>{\n    axios(apiurl+\"&i=\"+id).then(({data})=>{\n      let result=data;\n\n      setState(prevState=>{\nreturn {...prevState,selected:result}\n      });\n    })\n    .catch(handleErrors)\n  }\n  const closePopup = () => {\n  setState(prevState=>{\n    return{...prevState, selected:{}}\n  });\n}\nfunction handleErrors(error) {\n  if (error.response) {\n    // The request was made and the server responded with a status code\n    // that falls out of the range of 2xx\n    alert(error.response.data);\n    alert(error.response.status);\n    alert(error.response.headers);\n  } else if (error.request) {\n    // The request was made but no response was received\n    // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n    // http.ClientRequest in node.js\n    alert(error.request);\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    alert('Error', error.message);\n  }\n  alert(error.config);\n}\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n<h1>Movie Database</h1>\n      </header>\n      <main>\n       <Search handleInput={handleInput} search={search}/>\n     <Results results={state.results} openPopup={openPopup}/>\n     {(typeof state.selected.Title != \"undefined\") ? <Popup selected={state.selected} closePopup={closePopup} /> :false}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}